<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mybatis.helloworld.dao.LitemallAdMapperDynamicSQL">

	<!-- public List<LitemallAd> getLitemAdByConditionIfWhere(LitemallAd litemallAd); -->
	<select id="getLitemAdByConditionIfWhere" resultType="com.mybatis.helloworld.bean.LitemallAd">
		select id,name,content,deleted from litemall_ad 
		<!-- where 1=1 -->
		<where><!-- 用于解决SQL语句中where关键字以及条件中第一个and或者or的问题  -->
			<if test="id!=null">
				and id = #{id}
			</if>
			<if test="name!=null&amp;&amp;name!=&quot;&quot;">
				and name = #{name}
			</if>
			<if test="content!=null and content.trim()!=''">
				and content = #{content}
			</if>
			<if test="deleted==0 or deleted==1">
				and deleted = #{deleted}
			</if>
		</where>
	</select>
	
	
	<!-- public List<LitemallAd> getLitemAdByConditionTrim(LitemallAd litemallAd); -->
	<select id="getLitemAdByConditionTrim" resultType="com.mybatis.helloworld.bean.LitemallAd">
		select id,name,content,deleted from litemall_ad 
		<!-- where 1=1 -->
		<!-- <trim>:可以嵌套
				prefix: 添加前缀
				prefixOverrides: 覆盖/去掉前缀
				suffix: 添加后缀
				suffixOverrides: 覆盖/去掉后缀
		-->
		<trim prefix="where" suffixOverrides="and|or">
			<if test="id!=null">
				id = #{id} and 
			</if>
			<if test="name!=null&amp;&amp;name!=&quot;&quot;">
				name = #{name} and 
			</if>
			<if test="content!=null and content.trim()!=''">
				content = #{content} and 
			</if>
			<if test="deleted==0 or deleted==1">
				deleted = #{deleted}
			</if>
		</trim>
	</select>
	
	<!-- public void updateLitemAdConditionSet(LitemallAd litemallAd);  -->
	<update id="updateLitemAdConditionSet" >
		update litemall_ad
		<set>
			<if test="name!=null&amp;&amp;name!=&quot;&quot;">
				name = #{name},
			</if>
			<if test="content!=null and content.trim()!=''">
				content = #{content}, 
			</if>
			<if test="deleted==0 or deleted==1">
				deleted = #{deleted}
			</if>
		</set>	
		where id = #{id}
		
	</update>
	
	
	<!-- public List<LitemallAd> getLitemAdByConditionChoose(LitemallAd litemallAd); -->
	<select id="getLitemAdByConditionChoose" resultType="com.mybatis.helloworld.bean.LitemallAd">
		select id,name,content,deleted from litemall_ad 
		where
		<choose>
			<when test="id!=null">
				id = #{id}
			</when>
			<when test="name!=null&amp;&amp;name!=&quot;&quot;">
				name = #{name}
			</when>
			<when test="content!=null and content.trim()!=''">
				content = #{content}
			</when>
			<otherwise>
				deleted = #{deleted}
			</otherwise>
		</choose>
	</select>
	
	<!-- public List<LitemallAd> getLitemAdByIds(List<Integer> ids);  -->
	<select id="getLitemAdByIds" resultType="com.mybatis.helloworld.bean.LitemallAd">
		<!-- select * from litemall_ad where id in(?,?,?)
			select * from litemall_ad where id=? or id=? or id=?
			<foreach>:
				collection:指定要迭代的集合
				item：当前从集合中迭代出的元素
				open：指定一个开始字符
				close:指定一个结束字符
				separator: 元素与元素之间的分隔符
		 -->
		 select * from litemall_ad 
		 where id in 
	 	<foreach collection="ids" item="currId" open="(" close=" )" separator=",">
	 		#{currId}
	 	</foreach>
	</select>
	
	
	<!-- 批量添加 public void addAds(@Param("ads")List<LitemallAd> litemallAds);
		 添加： insert into litemall_ad(x,x,x) values(?,?,?),(?,?,?),(?,?,?)
		 删除：delete from litemall_ad where id in (?,?,?)
		 
		 修改：update litemall_ad set name=#{name}... where id = #{id}
		 	  update litemall_ad set name=#{name}... where id = #{id}
		 	  update litemall_ad set name=#{name}... where id = #{id}
		 	  
		默认情况下，JDBC不允许江多条SQL拼成一个字符串。
		可以在连接的URL的后面可以加一个参数,示例：allwMultiQueries=true
		jdbc:mysql://localhost:3306/litemall?useUnicode=true&characterEncoding=UTF-8&allwMultiQueries=true
	 -->
	<insert id="addAds">
		insert into litemall_ad(name,link,url,position,content,start_time,end_time,enabled,add_time,update_time,deleted) 
		values
		<foreach collection="ads" item="ad" separator=",">
		(#{ad.name},#{ad.link},#{ad.url},#{ad.position},#{ad.content},#{ad.startTime},#{ad.endTime},#{ad.enabled},#{ad.addTime},#{ad.updateTime},#{ad.deleted})
		</foreach>
	</insert>
	
	<!-- public void deleteAds(@Param("ids")List<Integer> ids); -->
	<delete id="deleteAds">
		delete from litemall_ad 
		where id in 
		<foreach collection="ids" item="currId" open="(" close=" )" separator=",">
	 		#{currId}
	 	</foreach>
	</delete>
	
	<!-- public void updateAds(@Param("ads")List<LitemallAd> litemallAds); -->
	<update id="updateAds">
		<!-- <foreach collection="ads" item="ad"  separator=";">
	 		update litemall_ad set name=#{ad.name} where id = #{ad.id}
	 	</foreach> -->
	 	
        update litemall_ad
	    set name = 
	    <foreach collection="ads" item="ad"  separator=" "  open="case id" close="end">
	        when #{ad.id} then #{ad.name}
	    </foreach>
	    ,content = 
	    <foreach collection="ads" item="ad"  separator=" "  open="case id" close="end">
	        when #{ad.id} then #{ad.content}
	    </foreach>
		where id in 
		<foreach collection="ads" item="ad" open="(" close=")" separator=",">
			#{ad.id}
		</foreach>
	</update>

</mapper>